// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email     String @unique
  name      String? 
  password  String

  tasks Task[]
  timeBlocks TimeBlock[]
  pomodoroSettings PomodoroSettings[]
  pomodoroSessions PomodoroSession[]
  noteLists NoteList[]

  @@map("user")
}

model Task {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name          String
  priority      Priority?
  isCompleted  Boolean? @default(false) @map("is_completed")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id") // эти поля существуют только на уровне Prisma, в БД они не создаются

  @@map("task")
}

model TimeBlock {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String
  color     String?
  duration  Int
  order     Int @default(1)

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model PomodoroSettings {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  workInterval  Int? @default(50) @map("work_interval")
  breakInterval Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("pomodoro_settings")
}

model PomodoroSession {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted  Boolean? @default(false) @map("is_completed")

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  rounds PomodoroRound[]

  @@map("pomodoro_session")
}

model PomodoroRound {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalSeconds  Int @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  pomodoroSession PomodoroSession @relation(fields: [pomodoroSessionId], references: [id], onDelete: Cascade)
  pomodoroSessionId String @map("pomodoro_session_id")

  @@map("pomodoro_round")
}

model NoteList {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String

  user User @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  note Note[]

  @@map("note_list")
}

model Note {
  id        String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  isCompleted Boolean? @default(false) @map("is_completed")

  noteList NoteList @relation(fields: [noteListId], references: [id])
  noteListId String @map("note_list_id")

  @@map("note")
}

enum Priority {
  low
  medium
  high
}